name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup environment
        working-directory: ./backend
        run: |
          cp .env.example .env
          echo "MONGODB_URI=mongodb://localhost:27017/test" >> .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "BCRYPT_ROUNDS=12" >> .env

      - name: Run backend tests
        working-directory: ./backend
        run: npm test

      - name: Run backend tests with coverage
        working-directory: ./backend
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend UI Tests
    runs-on: ubuntu-latest
    needs: backend-tests

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Setup backend environment
        working-directory: ./backend
        run: |
          cp env.example .env
          echo "MONGODB_URI=mongodb://localhost:27017/test" >> .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "BCRYPT_ROUNDS=12" >> .env

      - name: Setup frontend environment
        working-directory: ./frontend
        run: |
          cp .env.example .env
          echo "VITE_API_URL=http://localhost:5000" >> .env

      - name: Start backend server
        working-directory: ./backend
        run: npm start &
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test-secret-key
          BCRYPT_ROUNDS: 12

      - name: Wait for backend
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:5000/health; do sleep 1; done' || exit 1

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: frontend/test-results/
          retention-days: 30

  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: backend-tests

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Setup backend environment
        working-directory: ./backend
        run: |
          cp .env.example .env
          echo "MONGODB_URI=mongodb://localhost:27017/test" >> .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "BCRYPT_ROUNDS=12" >> .env

      - name: Setup frontend environment
        working-directory: ./frontend
        run: |
          cp .env.example .env
          echo "VITE_API_URL=http://localhost:5000" >> .env

      - name: Start backend server
        working-directory: ./backend
        run: npm start &
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test-secret-key
          BCRYPT_ROUNDS: 12

      - name: Wait for backend
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:5000/api/health; do sleep 1; done' || exit 1

      - name: Run visual tests
        working-directory: ./frontend
        run: npx playwright test visual.spec.ts

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: frontend/test-results/
          retention-days: 30

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, visual-tests]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: Available in Codecov" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Reports: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Visual Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.visual-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Screenshots: Available in artifacts" >> $GITHUB_STEP_SUMMARY
